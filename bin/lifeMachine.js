// Generated by CoffeeScript 1.8.0
(function() {
  angular.module("lifeApp").factory('LifeMachine', function(MatrixHelper) {
    var LifeMachine;
    LifeMachine = (function() {
      LifeMachine.prototype.world = [];

      LifeMachine.prototype.height = 20;

      LifeMachine.prototype.width = 30;

      LifeMachine.prototype.worldSize = 600;

      function LifeMachine() {
        this.makeWorld();
      }

      LifeMachine.prototype.init = function(width, height) {
        this.width = width;
        this.height = height;
        this.worldSize = this.height * this.width;
        this.makeWorld();
        return this;
      };

      LifeMachine.prototype.makeWorld = function() {
        var i, _i, _ref, _results;
        this.world = [];
        _results = [];
        for (i = _i = 0, _ref = this.worldSize; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.world.push({
            position: MatrixHelper.intToCell(i, this.width),
            alive: false
          }));
        }
        return _results;
      };

      LifeMachine.prototype.generate = function() {
        return this._generator(function(nextLife, lastLife, neighbours) {
          if (lastLife.alive && neighbours < 2) {
            nextLife.alive = false;
          }
          if (lastLife.alive && (neighbours === 2 || neighbours === 3)) {
            nextLife.alive = true;
          }
          if (lastLife.alive && neighbours > 3) {
            nextLife.alive = false;
          }
          if (!lastLife.alive && neighbours === 3) {
            nextLife.alive = true;
          }
          return nextLife;
        });
      };

      LifeMachine.prototype.kill = function() {
        return this._generator(function(nextLife) {
          nextLife.alive = false;
          return nextLife;
        });
      };

      LifeMachine.prototype.pollute = function() {
        return this._generator(function(nextLife) {
          if (Math.random() < .1) {
            nextLife.alive = true;
          }
          return nextLife;
        });
      };

      LifeMachine.prototype._generator = function(morph) {
        var future, i, _i, _ref;
        future = [];
        for (i = _i = 0, _ref = this.worldSize; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          future.push(morph(_.clone(this.world[i]), this.world[i], this._countLivingNeighbours(i)));
        }
        return this.world = future;
      };

      LifeMachine.prototype._countLivingNeighbours = function(index) {
        var count, n, _i, _len, _ref;
        count = 0;
        _ref = MatrixHelper.getAdjacentCells(index, this.width, this.height);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          if (this.world[n].alive) {
            count = count + 1;
          }
        }
        return count;
      };

      return LifeMachine;

    })();
    return new LifeMachine();
  });

}).call(this);

//# sourceMappingURL=lifeMachine.js.map
